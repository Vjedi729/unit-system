import {IfEq} from './typeEqual'
type AddHelper<X extends number, Y extends number, Fallback extends number> = 
IfEq<X, 0, Y,
	IfEq<Y, 0, X,
IfEq<X, -5,
	IfEq<Y, -5, -10,
	IfEq<Y, -4, -9,
	IfEq<Y, -3, -8,
	IfEq<Y, -2, -7,
	IfEq<Y, -1, -6,
	IfEq<Y, 1, -4,
	IfEq<Y, 2, -3,
	IfEq<Y, 3, -2,
	IfEq<Y, 4, -1,
	IfEq<Y, 5, 0,
	Fallback
	>>>>>>>>>>,
IfEq<X, -4,
	IfEq<Y, -5, -9,
	IfEq<Y, -4, -8,
	IfEq<Y, -3, -7,
	IfEq<Y, -2, -6,
	IfEq<Y, -1, -5,
	IfEq<Y, 1, -3,
	IfEq<Y, 2, -2,
	IfEq<Y, 3, -1,
	IfEq<Y, 4, 0,
	IfEq<Y, 5, 1,
	Fallback
	>>>>>>>>>>,
IfEq<X, -3,
	IfEq<Y, -5, -8,
	IfEq<Y, -4, -7,
	IfEq<Y, -3, -6,
	IfEq<Y, -2, -5,
	IfEq<Y, -1, -4,
	IfEq<Y, 1, -2,
	IfEq<Y, 2, -1,
	IfEq<Y, 3, 0,
	IfEq<Y, 4, 1,
	IfEq<Y, 5, 2,
	Fallback
	>>>>>>>>>>,
IfEq<X, -2,
	IfEq<Y, -5, -7,
	IfEq<Y, -4, -6,
	IfEq<Y, -3, -5,
	IfEq<Y, -2, -4,
	IfEq<Y, -1, -3,
	IfEq<Y, 1, -1,
	IfEq<Y, 2, 0,
	IfEq<Y, 3, 1,
	IfEq<Y, 4, 2,
	IfEq<Y, 5, 3,
	Fallback
	>>>>>>>>>>,
IfEq<X, -1,
	IfEq<Y, -5, -6,
	IfEq<Y, -4, -5,
	IfEq<Y, -3, -4,
	IfEq<Y, -2, -3,
	IfEq<Y, -1, -2,
	IfEq<Y, 1, 0,
	IfEq<Y, 2, 1,
	IfEq<Y, 3, 2,
	IfEq<Y, 4, 3,
	IfEq<Y, 5, 4,
	Fallback
	>>>>>>>>>>,
IfEq<X, 1,
	IfEq<Y, -5, -4,
	IfEq<Y, -4, -3,
	IfEq<Y, -3, -2,
	IfEq<Y, -2, -1,
	IfEq<Y, -1, 0,
	IfEq<Y, 1, 2,
	IfEq<Y, 2, 3,
	IfEq<Y, 3, 4,
	IfEq<Y, 4, 5,
	IfEq<Y, 5, 6,
	Fallback
	>>>>>>>>>>,
IfEq<X, 2,
	IfEq<Y, -5, -3,
	IfEq<Y, -4, -2,
	IfEq<Y, -3, -1,
	IfEq<Y, -2, 0,
	IfEq<Y, -1, 1,
	IfEq<Y, 1, 3,
	IfEq<Y, 2, 4,
	IfEq<Y, 3, 5,
	IfEq<Y, 4, 6,
	IfEq<Y, 5, 7,
	Fallback
	>>>>>>>>>>,
IfEq<X, 3,
	IfEq<Y, -5, -2,
	IfEq<Y, -4, -1,
	IfEq<Y, -3, 0,
	IfEq<Y, -2, 1,
	IfEq<Y, -1, 2,
	IfEq<Y, 1, 4,
	IfEq<Y, 2, 5,
	IfEq<Y, 3, 6,
	IfEq<Y, 4, 7,
	IfEq<Y, 5, 8,
	Fallback
	>>>>>>>>>>,
IfEq<X, 4,
	IfEq<Y, -5, -1,
	IfEq<Y, -4, 0,
	IfEq<Y, -3, 1,
	IfEq<Y, -2, 2,
	IfEq<Y, -1, 3,
	IfEq<Y, 1, 5,
	IfEq<Y, 2, 6,
	IfEq<Y, 3, 7,
	IfEq<Y, 4, 8,
	IfEq<Y, 5, 9,
	Fallback
	>>>>>>>>>>,
IfEq<X, 5,
	IfEq<Y, -5, 0,
	IfEq<Y, -4, 1,
	IfEq<Y, -3, 2,
	IfEq<Y, -2, 3,
	IfEq<Y, -1, 4,
	IfEq<Y, 1, 6,
	IfEq<Y, 2, 7,
	IfEq<Y, 3, 8,
	IfEq<Y, 4, 9,
	IfEq<Y, 5, 10,
	Fallback
	>>>>>>>>>>,
Fallback
>>>>>>>>>>
>>;

type AddFallback = number;
export type Add<X extends number, Y extends number> = IfEq<X, number, number, IfEq<Y, number, number, AddHelper<X, Y, AddFallback>>>